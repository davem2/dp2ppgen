- Generate report on what was done
	- table of illustrations procesed in the form id|fileName|width|caption(line breaks converted to <br/>)
	- outline of chapter/sections
		id|CHAPTER I
		...id|SECTION I

- Need to worry about encoding?

- Add "aggresiveness" parameter for heading detection option.
    Simple max line count?

- Add option to squash paragraphs to one line .. not sure this would be useful?

- Add footnote processing
  - Option to place footnote inline

- New feature (maybe a whole new tool in itself) to help resolve -* issues
    - generate report on all -* words
    - use google ngram api to get statistics on hyphen-ated vs hyphenated
	https://github.com/econpy/google-ngrams
	http://www.culturomics.org/Resources/get-ngrams
    - search for usage withing text to get statistics
    - generate report
    - autofix?

- Autojoin -* *- cases due to line breaks (just move to same line and leave -* in place)

- Sidenotes

- Automate section id naming

- Check that --keeporiginal works with all operations (doesnt with --footnotes for example)

- Generate TOC? Maybe detect certain style TOC and generate or have user pick.. user defined templates? Usefulness of this depends on how variable styles are for TOC

- More comprehensive error check on pgdp markup

- Add configuration file to allow for more customizability

- Add basic illustration conversion

- <tb> to .tb

- Convert UTF8?

- Refactor footnote processing function

- Convert lines like "*/\n// Pg xx\n/*" to "// Pg xx\n"

- New application that performs all checks in "make errorcheck" and generates an html report with the full text that was scanned included in the report. All issues are hyperlinked to the line/column in document that they reference. Maybe split view with error report on one side and document on other (like guiguts but in a browser). Have original be editable in browser so corrections could be made as well would be bonus. Another bonus would be to map errors from scanned doc (book-utf8) back into ppgen source file (book-src.txt) and be able to navigate/make corrections directly to source file.

- Implement isLinePageBreak() returns (True, 010.png) and use where appropriate. Handle ppgen as well as pgdp style so that page renumbering will no longer be a requirement for all other operations.

- Generate index?

- Automatically convert /# /* to nf/.in,.ll

- Add --fixup option that performs guiguts fixup function:
    • Remove spaces at end of line.
    • Remove blank lines at end of pages.
    • Remove spaces on either side of hyphens.
    • Remove space before periods.
    • Remove space before exclamation points.
    • Remove space before question marks.
    • Remove space before commas.
    • Remove space before semicolons.
    • Remove space before colons.
    • Remove space after opening and before closing brackets. () [] {}
    • Remove space after open angle quote and before close angle quote.
    • Remove space after beginning and before ending double quote.
    • Ensure space before ellipses except after period.
    • Format any line that contains only 5 *s and whitespace to be the standard 5 asterisk thought break.
    • Convert multiple space to single space.
    • Fix obvious l<-->1 problems.
    You can also specify whether to skip text inside the /* */ markers or not.

- Add support for guiguts style formatting markup /p /f .. /toc? /*[4] /#[6,53] /#[4.6,70]

- Split off general "fixup" type functions that are not ppgen specific into a seperate application?

- Change design so that instead of parsing the whole file per operation do one pass. Change functions to take line instead of file buffer.. (for single line conversions..).. maybe pass group of lines?

- Add project to python package repo so it can be installed via pip
    - read packaging guide on pypi site
    - add setup.py
    - structure project as best practices

- Footnote processing slow.. (fm1b.txt good test) takes about 15 seconds to process

- Templates? Could just be config file

- Would be nice to have .li HTML in a separate file for easier edit workflow (edit/refresh), add feature that parses out .li HTML snippets and .de statements and creates an HTML file out of them.

- Add option to convert tables, use guiguts style markup or autodetect (-----+ within /* */). Output .li t (original text in /* */) .li h rst2htmlb, .de statements

- Option to convert TOC, LOI. Autodetect with regex "(.+) {6,}(\d+)" and replace with #\1:Page_\2#|#\2#, or use user supplied .sr style regex.

- Detect diacritics in utf8 conversions and add necesary .cv statements

- Add --autodetect for tables/toc, maybe remove --tables and --toc and just process marked blocks by default, or use generic --processoutoflineformatting

- Add toc .sr parameter for user supplied toc search/re

- Add fix for nested [] issue inside [Sidenote (already fixed in [Footnote)

- Update to new ppgen footnote capabilities

- Fix log messages for -ce
INFO: Processing chapter and section headings
INFO: Processing chapter headings
INFO: Processing section headings

- Use .startswith instead of re.match where appropriate

